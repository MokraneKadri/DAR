package fr.upmc.dar.tools;

import java.util.Map;

import fr.upmc.dar.dao.interfaces.IUserDao;
import fr.upmc.dar.enums.SignInFields;
import fr.upmc.dar.enums.SignUpFields;

public class SignInValidator {

	
	private IUserDao user;
	private Map<String,String> committedErrors;
	
	
	
	
	
	
	
	
	public SignInValidator(IUserDao user, Map<String, String> committedErrors) {
		super();
		this.user = user;
		this.committedErrors = committedErrors;
	}

	
	public boolean isAValidEmail(String login){
		
		if(login.isEmpty()){
			committedErrors.put(SignInFields.LOGIN.getAttributeName(), "le champ email est obligatoire ,merci de le remplir");
			return false;
		}
		if(login.contains("@")){ //l'utilisateur se connecte avec son mail
			if(!login.matches(SignInFields.EMAILREGEXP.getAttributeName())){
			committedErrors.put(SignInFields.LOGIN.getAttributeName(), "l'adresse email indiqué n'est pas valide !");
			return false;
			}else return true;
			
		} else return false;//cela suppose que l'utilisateur se connect avec un userName
		
	}
	
	
public boolean isAValidPassword(String passwd){
		
		if(passwd.isEmpty()){
			committedErrors.put(SignInFields.PASSWORD.getAttributeName(), "le champ mot de passe est obligatoire ,merci de le remplir");
			return false;
		}
		if(passwd.length() <6 ){
			committedErrors.put(SignInFields.PASSWORD.getAttributeName(), "le mot de passe indiqué est trop court !");
			return false;
		}
		
		return true;
	}
	
	public boolean validateCredantials(String login,String passwd) throws Exception{
		if(isAValidEmail(login)){
			try {
				if(user.fin(login)!=null){
					if(user.fin)
					return true;
				}
				else if(user.findUserByUserName(login)!=null){
					return true;
				}
			} catch (Exception e) {
				
				e.printStackTrace();
			}
		}
		
		return false;
	}
	
	public IUserDao getUser() {
		return user;
	}
	public void setUser(IUserDao user) {
		this.user = user;
	}
	public Map<String, String> getCommittedErrors() {
		return committedErrors;
	}
	public void setCommittedErrors(Map<String, String> committedErrors) {
		this.committedErrors = committedErrors;
	}
	
	
}
